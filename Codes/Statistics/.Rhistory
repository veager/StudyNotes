cor.kendall.2(x1, x2)
cor.kendall.1(x1, x2)
or.test(x1, x2, method="kendall")
cor.test(x1, x2, method="kendall")
cor.test(x1, x2, method="kendall")
cor.kendall.test.z(x, y){
r = cor.kendall.1(x, y)
z = r / sqrt(2*(2*n+5) / (9*n*(n-1)))
return (z)
}
# Example: non-tied samples
x1 = c(10.85, 10.44, 10.50, 10.89, 10.62)
cor.kendall.test.z(x, y)
cor.kendall.test.z(x, y){
r = cor.kendall.1(x, y)
z = r / sqrt(2*(2*n+5) / (9*n*(n-1)))
return (z)
}
cor.kendall.test.z(x, y)
cor.1 = function(x, y, method="pearson"){
if (method == "pearson"){
r = cor.pearson(x, y)
}
else if (method == "spearman") {
r = cor.spearman.1(x, y)
}
else if (method == "kendall") {
r = cor.kendall.2(x, y)
}
return (r)
}
cor.kendall.test.z(x, y)
cor.kendall.test.z(x, y){
r = cor.kendall.1(x, y)
z = r / sqrt(2*(2*n+5) / (9*n*(n-1)))
return (z)
}
cor.kendall.test.z = function(x, y){
r = cor.kendall.1(x, y)
z = r / sqrt(2*(2*n+5) / (9*n*(n-1)))
return (z)
}
cor.kendall.test.z(x, y)
cor.kendall.test.z(x1, x2)
cor.test(x1, x2)
# Example: non-tied samples
x1 = c(10.85, 10.44, 10.50, 10.89, 10.62)
x2 = c( 7.84,  7.96,  7.81,  7.47,  7.74)
cor(x1, x2, method='kendall')
cor.kendall.2(x1, x2)
cor.kendall.1(x1, x2)
cor.test(x1, x2, method="kendall")
cor.kendall.test.z(x1, x2)
cor.test(x1, x2)
cor.kendall.test.z(x1, x2)
cor.test(x1, x2)
cor.kendall.test.z = function(x, y){
r = cor.kendall.1(x, y)
z = r / sqrt( 2 * (2*n+5) / (9 * n * (n-1)))
return (z)
}
# Example: non-tied samples
x1 = c(10.85, 10.44, 10.50, 10.89, 10.62)
cor.kendall.test.z(x1, x2)
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95)
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95)
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative = 'both')
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
# Example: tied samples
x1 = c(7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4)
x2 = c(2.8, 2.9, 2.8, 2.6, 3.5,  4.6,  5.0)
cor(x1, x2, method='kendall')
cor.kendall.2(x1, x2)
cor.kendall.1(x1, x2)
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
# Example: non-tied samples
x1 = c(10.85, 10.44, 10.50, 10.89, 10.62)
x2 = c( 7.84,  7.96,  7.81,  7.47,  7.74)
cor(x1, x2, method='kendall')
cor.kendall.2(x1, x2)
cor.kendall.1(x1, x2)
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
cor.kendall.test.z = function(x, y){
r = cor.kendall.1(x, y)
z = r / sqrt( 2 * (2*n+5) / (9 * n * (n-1)))
n = length(x)
S = 0
for (i in 1:(n-1)){
for (j in (i+1):n){
S = S + sign(x[i]-x[j]) * sign(y[i]-y[j])
}
}
res = list("S"=S, "z"=z)
return (res)
}
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
cor.kendall.test.z = function(x, y){
r = cor.kendall.1(x, y)
z = r / sqrt( 2 * (2*n+5) / (9 * n * (n-1)))
n = length(x)
S = 0
for (i in 1:(n-1)){
for (j in (i+1):n){
s1 = sign(x[i]-x[j])
if s1 >= 0:
S = S + s1
}
}
res = list("S"=S, "z"=z)
return (res)
}
cor.kendall.test.z = function(x, y){
r = cor.kendall.1(x, y)
z = r / sqrt( 2 * (2*n+5) / (9 * n * (n-1)))
n = length(x)
S = 0
for (i in 1:(n-1)) {
for (j in (i+1):n) {
s1 = sign(x[i]-x[j])
if (s1 >= 0) {
S = S + s1
}
}
}
res = list("S"=S, "z"=z)
return (res)
}
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
cor.kendall.test.z = function(x, y){
r = cor.kendall.1(x, y)
z = r / sqrt( 2 * (2*n+5) / (9 * n * (n-1)))
n = length(x)
S = 0
for (i in 1:(n-1)) {
for (j in (i+1):n) {
s1 = sign(x[i]-x[j])
if (s1 > 0) {
S = S + s1
}
}
}
res = list("S"=S, "z"=z)
return (res)
}
# Example: non-tied samples
x1 = c(10.85, 10.44, 10.50, 10.89, 10.62)
x2 = c( 7.84,  7.96,  7.81,  7.47,  7.74)
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
cor.kendall.test.z = function(x, y){
r = cor.kendall.1(x, y)
z = r / sqrt( 2 * (2*n+5) / (9 * n * (n-1)))
n = length(x)
S = 0
for (i in 1:(n-1)) {
for (j in (i+1):n) {
s1 = sign(x[i]-x[j]) * sign(y[i]-y[j])
if (s1 > 0) {
S = S + s1
}
}
}
res = list("S"=S, "z"=z)
return (res)
}
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
x1 = c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)
x2 = c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')$statistc
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')$statistic
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
pnorm(z)
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
pnorm(-z) * 2
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
pnorm(-z) * 2
cor.kendall.2(x1, x2)
r = cor.kendall.2(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
pKendall(r, N=length(x1), lower.tail=T)
pnorm(-z) * 2
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
library(SuppDists)
pKendall(r, N=length(x1), lower.tail=T)
library(SuppDists)
pKendall(r, N=length(x1), lower.tail=T)
pnorm(-z) * 2
r = cor.kendall.2(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
library(SuppDists)
pKendall(-abs(r), N=length(x1), lower.tail=T)
pnorm(-z) * 2
library(SuppDists)
pKendall(-abs(r), N=length(x1), lower.tail=T)
pnorm(-z)
pKendall(-abs(r), N=length(x1), lower.tail=T)/2
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
pnorm(-z)
pnorm(-abs(z), lower.tail=T)*2
cor.kendall.test.z = function(x, y){
n = length(x)
r = cor.kendall.1(x, y)
z = r / sqrt( 2 * (2*n+5) / (9 * n * (n-1)))
S = 0
for (i in 1:(n-1)) {
for (j in (i+1):n) {
s1 = sign(x[i]-x[j]) * sign(y[i]-y[j])
if (s1 > 0) {
S = S + s1
}
}
}
res = list("S"=S, "z"=z)
return (res)
}
# Example: non-tied samples
x1 = c(10.85, 10.44, 10.50, 10.89, 10.62)
r = cor.kendall.2(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
library(SuppDists)
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
pnorm(-abs(z), lower.tail=T)*2
r = cor.kendall.2(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
x1 = c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)
x2 = c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)
r = cor.kendall.2(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
library(SuppDists)
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
pnorm(-abs(z), lower.tail=T)*2
source("E:/Document/GitHub/StudyNotes/Codes/Statistics/Correlation_analysis.R", echo=TRUE)
library(SuppDists)
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
cor.kendall.1(x1, x2)
x1 = c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)
x2 = c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)
r = cor.kendall.2(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
library(SuppDists)
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
r = cor.kendall.2(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
r = cor.kendall.2(x1, x2)
x1 = c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)
x2 = c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)
r = cor.kendall.2(x1, x2)
r = cor.kendall.2(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')$p.values
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')$p.value
pnorm(-abs(z), lower.tail=T)*2
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
# t-test
cor.test(x1, x2, method="pearson", conf.level=0.95, alternative="both.sided")$statistic
# t-test
cor.test(x1, x2, method="pearson", conf.level=0.95, alternative="two.sided")$statistic
cor.pearson.test.t(x1, x2)
cor.test(x1, x2, method="spearman", conf.level=0.95)
cor.spearman.test.z(x1, x2)
# Example for non-tied samples
x1 = c(10.85, 10.44, 10.50, 10.89, 10.62)
cor.spearman.test.z(x1, x2)
cor.test(x1, x2, method="spearman", conf.level=0.95)
# Example for non-tied samples
x1 = c(10.85, 10.44, 10.50, 10.89, 10.62)
x2 = c( 7.84,  7.96,  7.81,  7.47,  7.74)
cor(x1, x2, method='spearman')
cor.spearman.1(x1, x2)
cor.spearman.2(x1, x2)
cor.test(x1, x2, method="spearman", conf.level=0.95)
cor.spearman.test.z(x1, x2)
pnorm(-abs(z), lower.tail=T, alternative='two.sided')
pnorm(-abs(z), lower.tail=T)
pnorm(-abs(z), lower.tail=T)*2
cor.spearman.test.z(x1, x2)
z = cor.spearman.test.z(x1, x2)$z
pnorm(-abs(z), lower.tail=T)*2
cor.spearman.test.z = function(x, y) {
n = length(x)
S = sum((rank(x) - rank(y))^2)
r = cor.spearman.1(x, y)
z = r / sqrt(1 / (n-1))
res = list(z=z, S=S)
return (res)
}
cor.spearman.test.z(x1, x2)
z = cor.spearman.test.z(x1, x2)$z
pnorm(-abs(z), lower.tail=T)*2
cor.test(x1, x2, method="spearman", conf.level=0.95)
cor.test(x1, x2, method="spearman", conf.level=0.95)
library(SuppDists)
pSpearman(q=-abs(r), r=length(x1))
r = cor.spearman.1(x1, x2)
library(SuppDists)
pSpearman(q=-abs(r), r=length(x1), lower.tail=TRUE, alternative='two.sided')
r = cor.spearman.1(x1, x2)
library(SuppDists)
pSpearman(q=-abs(r), r=length(x1), lower.tail=T)*2
pSpearman(q=-abs(r), r=length(x1), lower.tail=T)*2
# Example for samples with ties
# From "Nonparametric statistical methods (Third edition)" (2014)
# Example 8.5, pp. 430
x1 = c(7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4)
x2 = c(2.8, 2.9, 2.8, 2.6, 3.5,  4.6,  5.0)
# using cor.test for tied samples with raise a warning
cor.test(x1, x2, method="spearman", conf.level=0.95)
cor.spearman.test.z(x1, x2)
# using pSpearman
r = cor(x1, x2, method="spearman")
library(SuppDists)
pSpearman(q=-abs(r), r=length(x1), lower.tail=T)*2
# Z-test : self codes
# arctanh function, z-transform
# x = 0.2  # [0, 1]
# y1 = 1/2 * log((1+x)/(1-x)) # ln
# y2 = atanh(x)
x1 = states$Population
x2 = states$Income
cor.test(x1, x2, method="pearson", conf.level=0.95)$"p.value"
cor.pearson.test.z(x1, x2, rho=0.2)
cor.pearson.test.z(x1, x2, rho=0.7)
cor.pearson.test.z(x1, x2, rho=-0.7)
# - - - - - - - - - -
# Testing for tied samples
# From "Nonparametric statistical methods (Third edition)" (2014)
# Example 8.5, pp. 430
x1 = c(7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4)
x2 = c(2.8, 2.9, 2.8, 2.6, 3.5,  4.6,  5.0)
# Spearman Correlation Coefficient
cor(x1, x2, method='spearman')
cor.spearman.1(x1, x2)
cor.spearman.2(x1, x2)
# using cor.test for tied samples with raise a warning
cor.test(x1, x2, method="spearman", conf.level=0.95)
cor.spearman.test.z(x1, x2)
# Spearman Correlation Coefficient
cor(x1, x2, method='spearman')
cor.spearman.1(x1, x2)
cor.spearman.2(x1, x2)
# Example: tied samples
x1 = c(7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4)
x2 = c(2.8, 2.9, 2.8, 2.6, 3.5,  4.6,  5.0)
r = cor(x1, x2, method='kendall')
library(SuppDists)
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
r = cor(x1, x2, method='kendall')
library(SuppDists)
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
# - - - - - - - - - -
# Testing for tied samples
# From "Nonparametric statistical methods (Third edition)" (2014) Example 8.5, pp. 430
x1 = c(7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4)
x2 = c(2.8, 2.9, 2.8, 2.6, 3.5,  4.6,  5.0)
# Spearman Correlation Coefficient
cor(x1, x2, method='spearman')
cor.spearman.1(x1, x2)
cor.spearman.2(x1, x2)
# Hypothesis tesing: using cor.test for tied samples with raise a warning
cor.test(x1, x2, method="spearman", conf.level=0.95)
cor.spearman.test.z(x1, x2)
# Hypothesis tesing: using pSpearman()
r = cor(x1, x2, method="spearman")
# Hypothesis tesing: using cor.test for tied samples with raise a warning
cor.test(x1, x2, method="spearman", conf.level=0.95)
cor.spearman.test.z(x1, x2)
# Hypothesis tesing: using pSpearman()
r = cor(x1, x2, method="spearman")
library(SuppDists)
pSpearman(q=-abs(r), r=length(x1), lower.tail=T)*2
# Example: non-tied samples
x1 = c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)
x2 = c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)
cor(x1, x2, method='kendall')
cor.kendall.2(x1, x2)
cor.kendall.1(x1, x2)
# Example: tied samples
x1 = c(7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4)
x2 = c(2.8, 2.9, 2.8, 2.6, 3.5,  4.6,  5.0)
cor(x1, x2, method='kendall')
cor.kendall.2(x1, x2)
cor.kendall.1(x1, x2)
# Example: non-tied samples
# From "Nonparametric statistical methods (Third edition)" (2014) Example 8.1, pp. 397
x1 = c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)
x2 = c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)
cor(x1, x2, method='kendall')
cor.kendall.2(x1, x2)
cor.kendall.1(x1, x2)
# Example: non-tied samples
# From "Nonparametric statistical methods (Third edition)" (2014) Example 8.1, pp. 397
x1 = c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)
x2 = c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)
# Kendall Correlation Coefficient
cor(x1, x2, method='kendall')
cor.kendall.2(x1, x2)
cor.kendall.1(x1, x2)
# Hypothesis tesing: using cor.test()
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
# Hypothesis tesing: using pKendall()
r = cor(x1, x2, method='kendall')
library(SuppDists)
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
# Example: tied samples
x1 = c(7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4)
x2 = c(2.8, 2.9, 2.8, 2.6, 3.5,  4.6,  5.0)
# Kendall Correlation Coefficient
cor(x1, x2, method='kendall')
cor.kendall.2(x1, x2)
cor.kendall.1(x1, x2)
# Hypothesis tesing: using cor.test() for tied samples with raise a warning
cor.kendall.test.z(x1, x2)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
# Hypothesis tesing: using pKendall()
r = cor(x1, x2, method='kendall')
library(SuppDists)
pKendall(-abs(r), N=length(x1), lower.tail=T)*2
source("E:/Document/GitHub/StudyNotes/Codes/Statistics/Correlation_analysis.R", echo=TRUE)
# Hypothesis tesing: using cor.test() for tied samples with raise a warning
cor.kendall.test.z(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
pnorm(-abs(z), lower.tail=T)
# Example: non-tied samples
# From "Nonparametric statistical methods (Third edition)" (2014) Example 8.1, pp. 397
x1 = c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)
x2 = c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)
# Kendall Correlation Coefficient
cor(x1, x2, method='kendall')
cor.kendall.2(x1, x2)
cor.kendall.1(x1, x2)
# Hypothesis tesing: using cor.test()
cor.kendall.test.z(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
pnorm(-abs(z), lower.tail=T)
cor.test(x1, x2, method='kendall', conf.level=0.95, alternative='two.sided')
# Hypothesis tesing: using self codes
cor.spearman.test.z(x1, x2)
# - - - - - - - - - -
# Testing for tied samples
# From "Nonparametric statistical methods (Third edition)" (2014) Example 8.5, pp. 430
x1 = c(7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4)
x2 = c(2.8, 2.9, 2.8, 2.6, 3.5,  4.6,  5.0)
# Spearman Correlation Coefficient
cor(x1, x2, method='spearman')
cor.spearman.1(x1, x2)
cor.spearman.2(x1, x2)
# Hypothesis tesing: using self codes
cor.spearman.test.z(x1, x2)
z = cor.spearman.test.z(x1, x2)$z
# Hypothesis tesing: using self-code
cor.kendall.test.z(x1, x2)
z = cor.kendall.test.z(x1, x2)$z
pnorm(-abs(z), lower.tail=T)*2  # two-sided test
# Hypothesis tesing: using self-codes
cor.spearman.test.z(x1, x2)
z = cor.spearman.test.z(x1, x2)$z
# Example from "Introduction to Statistics and Data Analysis" Table 4.7 pp 83
# non-tied samples
x1 = c(10.85, 10.44, 10.50, 10.89, 10.62)
x2 = c( 7.84,  7.96,  7.81,  7.47,  7.74)
# Spearman Correlation Coefficient
cor(x1, x2, method='spearman')
cor.spearman.1(x1, x2)
cor.spearman.2(x1, x2)
# Hypothesis tesing: using self-codes
cor.spearman.test.z(x1, x2)
z = cor.spearman.test.z(x1, x2)$z
pnorm(-abs(z), lower.tail=T)*2
# - - - - - - - - - -
# Testing for tied samples
# From "Nonparametric statistical methods (Third edition)" (2014) Example 8.5, pp. 430
x1 = c(7.1, 7.1, 7.2, 8.3, 9.4, 10.5, 11.4)
x2 = c(2.8, 2.9, 2.8, 2.6, 3.5,  4.6,  5.0)
# Spearman Correlation Coefficient
cor(x1, x2, method='spearman')
cor.spearman.1(x1, x2)
cor.spearman.2(x1, x2)
# Hypothesis tesing: using self-codes
cor.spearman.test.z(x1, x2)
z = cor.spearman.test.z(x1, x2)$z
pnorm(-abs(z), lower.tail=T)*2
